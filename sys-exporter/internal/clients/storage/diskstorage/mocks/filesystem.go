// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package filesystemmocks is a generated GoMock package.
package filesystemmocks

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileSystemer is a mock of FileSystemer interface.
type MockFileSystemer struct {
	ctrl     *gomock.Controller
	recorder *MockFileSystemerMockRecorder
}

// MockFileSystemerMockRecorder is the mock recorder for MockFileSystemer.
type MockFileSystemerMockRecorder struct {
	mock *MockFileSystemer
}

// NewMockFileSystemer creates a new mock instance.
func NewMockFileSystemer(ctrl *gomock.Controller) *MockFileSystemer {
	mock := &MockFileSystemer{ctrl: ctrl}
	mock.recorder = &MockFileSystemerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSystemer) EXPECT() *MockFileSystemerMockRecorder {
	return m.recorder
}

// MkdirAll mocks base method.
func (m *MockFileSystemer) MkdirAll(path string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockFileSystemerMockRecorder) MkdirAll(path, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockFileSystemer)(nil).MkdirAll), path, perm)
}

// OpenFile mocks base method.
func (m *MockFileSystemer) OpenFile(name string, flag int, perm os.FileMode) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", name, flag, perm)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockFileSystemerMockRecorder) OpenFile(name, flag, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockFileSystemer)(nil).OpenFile), name, flag, perm)
}

// Rename mocks base method.
func (m *MockFileSystemer) Rename(oldpath, newpath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", oldpath, newpath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockFileSystemerMockRecorder) Rename(oldpath, newpath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockFileSystemer)(nil).Rename), oldpath, newpath)
}
