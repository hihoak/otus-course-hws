// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go

// Package scheduler_mocks is a generated GoMock package.
package scheduler_mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/hihoak/otus-course-hws/hw12_13_14_15_calendar/internal/storage"
)

// MockClockwork is a mock of Clockwork interface.
type MockClockwork struct {
	ctrl     *gomock.Controller
	recorder *MockClockworkMockRecorder
}

// MockClockworkMockRecorder is the mock recorder for MockClockwork.
type MockClockworkMockRecorder struct {
	mock *MockClockwork
}

// NewMockClockwork creates a new mock instance.
func NewMockClockwork(ctrl *gomock.Controller) *MockClockwork {
	mock := &MockClockwork{ctrl: ctrl}
	mock.recorder = &MockClockworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClockwork) EXPECT() *MockClockworkMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockClockwork) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockClockworkMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockClockwork)(nil).Now))
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// DeleteOldEventsBeforeTime mocks base method.
func (m *MockStorage) DeleteOldEventsBeforeTime(ctx context.Context, fromTime time.Time, maxLiveTime time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldEventsBeforeTime", ctx, fromTime, maxLiveTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldEventsBeforeTime indicates an expected call of DeleteOldEventsBeforeTime.
func (mr *MockStorageMockRecorder) DeleteOldEventsBeforeTime(ctx, fromTime, maxLiveTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldEventsBeforeTime", reflect.TypeOf((*MockStorage)(nil).DeleteOldEventsBeforeTime), ctx, fromTime, maxLiveTime)
}

// ListEventsToNotify mocks base method.
func (m *MockStorage) ListEventsToNotify(ctx context.Context, fromTime time.Time, countOfEvents int) ([]*storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventsToNotify", ctx, fromTime, countOfEvents)
	ret0, _ := ret[0].([]*storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventsToNotify indicates an expected call of ListEventsToNotify.
func (mr *MockStorageMockRecorder) ListEventsToNotify(ctx, fromTime, countOfEvents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventsToNotify", reflect.TypeOf((*MockStorage)(nil).ListEventsToNotify), ctx, fromTime, countOfEvents)
}

// MockSequence is a mock of Sequence interface.
type MockSequence struct {
	ctrl     *gomock.Controller
	recorder *MockSequenceMockRecorder
}

// MockSequenceMockRecorder is the mock recorder for MockSequence.
type MockSequenceMockRecorder struct {
	mock *MockSequence
}

// NewMockSequence creates a new mock instance.
func NewMockSequence(ctrl *gomock.Controller) *MockSequence {
	mock := &MockSequence{ctrl: ctrl}
	mock.recorder = &MockSequenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSequence) EXPECT() *MockSequenceMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockSequence) Push(ctx context.Context, exchange string, messages [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, exchange, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockSequenceMockRecorder) Push(ctx, exchange, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockSequence)(nil).Push), ctx, exchange, messages)
}
