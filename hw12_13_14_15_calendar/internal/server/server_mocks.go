// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package server is a generated GoMock package.
package server

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hw12_13_14_15_calendar "github.com/hihoak/otus-course-hws/hw12_13_14_15_calendar/pkg/api/event"
	grpc "google.golang.org/grpc"
)

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockApplication) CreateEvent(arg0 context.Context, arg1 *hw12_13_14_15_calendar.AddEventRequest) (*hw12_13_14_15_calendar.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1)
	ret0, _ := ret[0].(*hw12_13_14_15_calendar.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockApplicationMockRecorder) CreateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockApplication)(nil).CreateEvent), arg0, arg1)
}

// DeleteEvent mocks base method.
func (m *MockApplication) DeleteEvent(arg0 context.Context, arg1 *hw12_13_14_15_calendar.DeleteEventRequest) (*hw12_13_14_15_calendar.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", arg0, arg1)
	ret0, _ := ret[0].(*hw12_13_14_15_calendar.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockApplicationMockRecorder) DeleteEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockApplication)(nil).DeleteEvent), arg0, arg1)
}

// GetEvent mocks base method.
func (m *MockApplication) GetEvent(arg0 context.Context, arg1 *hw12_13_14_15_calendar.GetEventRequest) (*hw12_13_14_15_calendar.GetEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", arg0, arg1)
	ret0, _ := ret[0].(*hw12_13_14_15_calendar.GetEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockApplicationMockRecorder) GetEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockApplication)(nil).GetEvent), arg0, arg1)
}

// ListEvent mocks base method.
func (m *MockApplication) ListEvent(arg0 context.Context, arg1 *hw12_13_14_15_calendar.ListEventRequest) (*hw12_13_14_15_calendar.ListEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvent", arg0, arg1)
	ret0, _ := ret[0].(*hw12_13_14_15_calendar.ListEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvent indicates an expected call of ListEvent.
func (mr *MockApplicationMockRecorder) ListEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvent", reflect.TypeOf((*MockApplication)(nil).ListEvent), arg0, arg1)
}

// ModifyEvent mocks base method.
func (m *MockApplication) ModifyEvent(arg0 context.Context, arg1 *hw12_13_14_15_calendar.ModifyEventRequest) (*hw12_13_14_15_calendar.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyEvent", arg0, arg1)
	ret0, _ := ret[0].(*hw12_13_14_15_calendar.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyEvent indicates an expected call of ModifyEvent.
func (mr *MockApplicationMockRecorder) ModifyEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyEvent", reflect.TypeOf((*MockApplication)(nil).ModifyEvent), arg0, arg1)
}

// mustEmbedUnimplementedEventServiceServer mocks base method.
func (m *MockApplication) mustEmbedUnimplementedEventServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEventServiceServer")
}

// mustEmbedUnimplementedEventServiceServer indicates an expected call of mustEmbedUnimplementedEventServiceServer.
func (mr *MockApplicationMockRecorder) mustEmbedUnimplementedEventServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEventServiceServer", reflect.TypeOf((*MockApplication)(nil).mustEmbedUnimplementedEventServiceServer))
}

// MockHTTPServerer is a mock of HTTPServerer interface.
type MockHTTPServerer struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPServererMockRecorder
}

// MockHTTPServererMockRecorder is the mock recorder for MockHTTPServerer.
type MockHTTPServererMockRecorder struct {
	mock *MockHTTPServerer
}

// NewMockHTTPServerer creates a new mock instance.
func NewMockHTTPServerer(ctrl *gomock.Controller) *MockHTTPServerer {
	mock := &MockHTTPServerer{ctrl: ctrl}
	mock.recorder = &MockHTTPServererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPServerer) EXPECT() *MockHTTPServererMockRecorder {
	return m.recorder
}

// ListenAndServe mocks base method.
func (m *MockHTTPServerer) ListenAndServe() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenAndServe")
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenAndServe indicates an expected call of ListenAndServe.
func (mr *MockHTTPServererMockRecorder) ListenAndServe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAndServe", reflect.TypeOf((*MockHTTPServerer)(nil).ListenAndServe))
}

// Shutdown mocks base method.
func (m *MockHTTPServerer) Shutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockHTTPServererMockRecorder) Shutdown(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockHTTPServerer)(nil).Shutdown), ctx)
}

// MockGRPCServerer is a mock of GRPCServerer interface.
type MockGRPCServerer struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCServererMockRecorder
}

// MockGRPCServererMockRecorder is the mock recorder for MockGRPCServerer.
type MockGRPCServererMockRecorder struct {
	mock *MockGRPCServerer
}

// NewMockGRPCServerer creates a new mock instance.
func NewMockGRPCServerer(ctrl *gomock.Controller) *MockGRPCServerer {
	mock := &MockGRPCServerer{ctrl: ctrl}
	mock.recorder = &MockGRPCServererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCServerer) EXPECT() *MockGRPCServererMockRecorder {
	return m.recorder
}

// GracefulStop mocks base method.
func (m *MockGRPCServerer) GracefulStop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GracefulStop")
}

// GracefulStop indicates an expected call of GracefulStop.
func (mr *MockGRPCServererMockRecorder) GracefulStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GracefulStop", reflect.TypeOf((*MockGRPCServerer)(nil).GracefulStop))
}

// RegisterService mocks base method.
func (m *MockGRPCServerer) RegisterService(desc *grpc.ServiceDesc, impl interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterService", desc, impl)
}

// RegisterService indicates an expected call of RegisterService.
func (mr *MockGRPCServererMockRecorder) RegisterService(desc, impl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockGRPCServerer)(nil).RegisterService), desc, impl)
}

// Serve mocks base method.
func (m *MockGRPCServerer) Serve(listener net.Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve", listener)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockGRPCServererMockRecorder) Serve(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockGRPCServerer)(nil).Serve), listener)
}
